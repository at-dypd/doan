javascript:
  var map, heatmap;
  var all_polygons = [];
  var all_circles = [];
  var markers = [];
  var size = new OpenLayers.Size(21,25);
  var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
  var icon = new OpenLayers.Icon('http://www.openlayers.org/api/img/zoom-world-mini.png',size,offset);
  function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
      zoom: 12,
      center: {lat: 15.9977352, lng: 107.9880772}
     });

    heatmap = new google.maps.visualization.HeatmapLayer({
      data: getPoints(),
      map: map
    });

    drawingManager = new google.maps.drawing.DrawingManager({
      drawingControl: true,
      drawingControlOptions: {
        position: google.maps.ControlPosition.TOP_CENTER,
        drawingModes: ['marker', 'circle', 'polygon', 'polyline', 'rectangle']
      },
      markerOptions: {icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png'},
      circleOptions: {
      fillOpacity: 0.5,
      strokeWeight: 0.2,
      clickable: false,
      dragable: true,
      editable: true,
      zIndex: 1
      }
    });
    drawingManager.setMap(map);

    google.maps.event.addListener(drawingManager, 'polygoncomplete', function(polygon) {
      deleteAllShape();
      all_polygons.push(polygon);
      var arr = [];
      var locations = gon.locations;
      $.each(locations, function( index, value ) {
        latlon = new google.maps.LatLng(locations[index][1], locations[index][0]);
        if (google.maps.geometry.poly.containsLocation(latlon, polygon)) {
          arr.push(locations[index][1], locations[index][0]);
        }
      });
      this_form = $(".plant-map-frame").find(".drawing-form");
      this_form.find("#polygon_points").val(arr.join(','));
      is_statistic_check_box = $(".statistic-check-box").is(":checked")
      if(is_statistic_check_box) {
        $.ajax({
          type: "GET",
          url: Routes.statitic_user_medicinal_plants_path(),
          data: $(this_form).serialize()
        }).done(function() {
          console.log("success");
        });
      }
      else{
        $(this_form).submit();
      }
    });

    google.maps.event.addListener(drawingManager, 'circlecomplete', function(circle) {
      deleteAllShape();
      all_circles.push(circle);
      var arr = [];
      var locations = gon.locations;
      $.each(locations, function( index, value ) {
        latlon = new google.maps.LatLng(locations[index][1], locations[index][0]);
        if (google.maps.geometry.spherical.computeDistanceBetween(latlon, circle.getCenter()) <= circle.getRadius()) {
          arr.push([locations[index][1], locations[index][0]]);
        }
      });
      this_form = $(".plant-map-frame").find(".drawing-form");
      this_form.find("#circle_points").val(arr.join(','));
      $(this_form).submit();
    });

    // Polygon getBounds extension - google-maps-extensions
    // https://github.com/tparkin/Google-Maps-Point-in-Polygon
    // http://code.google.com/p/google-maps-extensions/source/browse/google.maps.Polygon.getBounds.js
    if (!google.maps.Polygon.prototype.getBounds) {
      google.maps.Polygon.prototype.getBounds = function(latLng) {
        var bounds = new google.maps.LatLngBounds(),
          paths = this.getPaths(),
          path,
          p, i;

        for (p = 0; p < paths.getLength(); p++) {
          path = paths.getAt(p);
          for (i = 0; i < path.getLength(); i++) {
            bounds.extend(path.getAt(i));
          }
        }

        return bounds;
      };
    }

    // Polygon containsLatLng - method to determine if a latLng is within a polygon
    google.maps.Polygon.prototype.containsLatLng = function(latLng) {
      // Exclude points outside of bounds as there is no way they are in the poly

      var inPoly = false,
        bounds, lat, lng,
        numPaths, p, path, numPoints,
        i, j, vertex1, vertex2;

      // Arguments are a pair of lat, lng variables
      if (arguments.length == 2) {
        if (
          typeof arguments[0] == "number" &&
          typeof arguments[1] == "number"
        ) {
          lat = arguments[0];
          lng = arguments[1];
        }
      } else if (arguments.length == 1) {
        bounds = this.getBounds();

        if (!bounds && !bounds.contains(latLng)) {
          return false;
        }
        lat = latLng.lat();
        lng = latLng.lng();
      } else {
        console.log("Wrong number of inputs in google.maps.Polygon.prototype.contains.LatLng");
      }

      // Raycast point in polygon method

      numPaths = this.getPaths().getLength();
      for (p = 0; p < numPaths; p++) {
        path = this.getPaths().getAt(p);
        numPoints = path.getLength();
        j = numPoints - 1;

        for (i = 0; i < numPoints; i++) {
          vertex1 = path.getAt(i);
          vertex2 = path.getAt(j);

          if (
            vertex1.lng() <  lng &&
            vertex2.lng() >= lng ||
            vertex2.lng() <  lng &&
            vertex1.lng() >= lng
          ) {
            if (
              vertex1.lat() +
              (lng - vertex1.lng()) /
              (vertex2.lng() - vertex1.lng()) *
              (vertex2.lat() - vertex1.lat()) <
              lat
            ) {
              inPoly = !inPoly;
            }
          }

          j = i;
        }
      }

      return inPoly;
    };
  }

  function toggleHeatmap() {
    heatmap.setMap(heatmap.getMap() ? null : map);
  }

  function deleteAllShape() {
    for (var i=0; i < all_polygons.length; i++)
    {
      all_polygons[i].setMap(null);
    }
    for (var i=0; i < all_circles.length; i++)
    {
      all_circles[i].setMap(null);
    }
    all_polygons = [];
    all_circles = [];
  }

  function changeGradient() {
    var gradient = [
      'rgba(0, 255, 255, 0)',
      'rgba(0, 255, 255, 1)',
      'rgba(0, 191, 255, 1)',
      'rgba(0, 127, 255, 1)',
      'rgba(0, 63, 255, 1)',
      'rgba(0, 0, 255, 1)',
      'rgba(0, 0, 223, 1)',
      'rgba(0, 0, 191, 1)',
      'rgba(0, 0, 159, 1)',
      'rgba(0, 0, 127, 1)',
      'rgba(63, 0, 91, 1)',
      'rgba(127, 0, 63, 1)',
      'rgba(191, 0, 31, 1)',
      'rgba(255, 0, 0, 1)'
    ]
    heatmap.set('gradient', heatmap.get('gradient') ? null : gradient);
  }

  function changeRadius() {
    heatmap.set('radius', heatmap.get('radius') ? null : 20);
  }

  function changeOpacity() {
    heatmap.set('opacity', heatmap.get('opacity') ? null : 0.2);
  }

  // Heatmap data: 500 Points
  function getPoints() {
    var arr = [];
    var locations = gon.locations;
    $.each(locations, function( index, value ) {
      latlon = new google.maps.LatLng(locations[index][1], locations[index][0]);
      arr.push(latlon);

      // Add marker
      //var marker = new google.maps.Marker({
      //  position: latlon,
      //  map: map,
      //  title: 'Hello World!'
      //});

      // Add maker event
    });
    return arr;
  }

  function showMarkers() {
    var arr = [];
    var locations = gon.locations;
    var markers_2 = new OpenLayers.Layer.Markers( "Markers" );
    mapObject.addLayer(markers_2);
    $.each(locations, function( index, value ) {
      latlon = new google.maps.LatLng(locations[index][1], locations[index][0]);

      // Add marker
      var marker = new google.maps.Marker({
        position: latlon,
        map: map,
        title: 'Hello World!'
      });
      markers.push(marker);
      marker_2 = new OpenLayers.Marker(new OpenLayers.LonLat(locations[index][0], locations[index][1]).transform(new OpenLayers.Projection("EPSG:4326"), new OpenLayers.Projection("EPSG:900913")),icon.clone());
      marker_2.events.register('mousedown', marker_2, function(evt) {
        $.ajax({
          type: "GET",
          url: Routes.detail_user_medicinal_plants_path(),
          data: {lat: marker.getPosition().lat(), lon: marker.getPosition().lng()}
        }).done(function() {
          console.log("success");
        });
        OpenLayers.Event.stop(evt); 
        });

      markers_2.addMarker(marker_2);

      marker.addListener('click', function() {
        $.ajax({
          type: "GET",
          url: Routes.detail_user_medicinal_plants_path(),
          data: {lat: this.getPosition().lat(), lon: this.getPosition().lng()}
        }).done(function() {
          console.log("success");
        });
      });
    });
  }

  function clearMarkers() {
    setMapOnAll(null);
  }

  function toggleSearchForm() {
    $(".search-form-body").toggle("slow");
  }

  function setMapOnAll(map) {
    for (var i = 0; i < markers.length; i++) {
      markers[i].setMap(map);
    }
  }

  var wmsUrl = "http://localhost:8080/geoserver/wms",
    wmsLayer = null,
    mapObject = null,
    baseLayer = null;

  var setCenter = function() {
    mapObject.setCenter(new OpenLayers.LonLat(107.9880772, 15.9977352).transform(
      new OpenLayers.Projection("EPSG:4326"),
      new OpenLayers.Projection("EPSG:900913")), 10);
  };

  var bindExampleBtnsClick = function() {
    $("#example-a-link").click(function(e) {
      e.preventDefault();
      showWmsLayer();
    });

    $("#example-b-link").click(function(e) {
      e.preventDefault();
      showWmsLayer({});
    });

    $("#example-c-link").click(function(e) {
      e.preventDefault();
      showWmsLayer({styles: "female_point"});
    });

    $("#example-d-link").click(function(e) {
      e.preventDefault();
      showWmsLayer({styles: "male_point"});
    });

    $("#example-e-link").click(function(e) {
      e.preventDefault();
      showWmsLayer({styles: "gender_point"});
    });

    $("#example-f-link").click(function(e) {
      e.preventDefault();
      getPoints();
    });

    $("#example-g-link").click(function(e) {
      e.preventDefault();
      showWmsLayer({styles: "zoom_point"});
    });

    $("#example-h-link").click(function(e) {
      e.preventDefault();
      $.get("home/distance", function(data) {
        var result = "" +
        "<div>Cliente 1: lat: " + data["one"]["lat"] + " lon: " + data["one"]["lon"] + "</div>" +
        "<div>Cliente 2: lat: " + data["two"]["lat"] + " lon: " + data["two"]["lon"] + "</div>" +
        "<div>distancia: " + data["distance"] + "</div>"
        $("#result").html(result);
      });
    });

    $("#age-filter-btn").click(function(e) {
      e.preventDefault();
      showWmsLayer({styles: "label_point", cql_filter: ("age > " + $("#age-input").val())})
    });
  };

  var getPoints = function() {
    $.get("home/points", function(points) {
        var features = []
        var vectorLayer = new OpenLayers.Layer.Vector("Cây thuốc", {projection: new OpenLayers.Projection("EPSG:900913")});

        for(var i = 0; i < points.length; i++){
            var geom = new OpenLayers.Geometry.fromWKT(points[i]["the_geom"]);
            var pointFeature = new OpenLayers.Feature.Vector(geom.transform(new OpenLayers.Projection("EPSG:4326"), new OpenLayers.Projection("EPSG:900913")), null, null);
            features.push(pointFeature);
        }

        mapObject.addLayer(vectorLayer);
        vectorLayer.addFeatures(features);
        vectorLayer.refresh();
    });
  };

  var removeWmsLayer = function() {
    if (wmsLayer) {
      mapObject.removeLayer(wmsLayer);
      delete wmsLayer;
    }
  };

  var showWmsLayer = function(options) {
    removeWmsLayer();

    var defaultOptions = {
      srs: "EPSG:4326",
      layers: "geoapp:banahill_layer",
      format: "image/png",
      tiled: true,
      transparent: true,
    }

    var mergedOptions = $.extend(defaultOptions, options);

    wmsLayer = new OpenLayers.Layer.WMS("Núi Bà Nà", wmsUrl, mergedOptions);
    mapObject.addLayer(wmsLayer);
  };

  var initMapOpenLayer = function(){
    mapObject = new OpenLayers.Map({
      div: 'map',
      numZoomLevels: 30,
      minZoom: 28,
      maxZoom: 35,
      projection: "EPSG:900913",
      maxResolution: 156543,
      maxExtent: new OpenLayers.Bounds(-20037508,-20037508,20037508,20037508),
    });
    baseLayer = new OpenLayers.Layer.Google(
      "Google Streets",
      {numZoomLevels: 35}
    );
    mapObject.addLayer(baseLayer);
    var pointLayer = new OpenLayers.Layer.Vector("Point Layer");
    var lineLayer = new OpenLayers.Layer.Vector("Line Layer");
    var polygonLayer = new OpenLayers.Layer.Vector("Polygon Layer");
    var boxLayer = new OpenLayers.Layer.Vector("Box layer");

    mapObject.addLayers([pointLayer, lineLayer, polygonLayer, boxLayer]);
    mapObject.addControl(new OpenLayers.Control.MousePosition());
    drawControls = {
        point: new OpenLayers.Control.DrawFeature(pointLayer,
            OpenLayers.Handler.Point, {featureAdded: pointFeature}),
        line: new OpenLayers.Control.DrawFeature(lineLayer,
            OpenLayers.Handler.Path),
        polygon: new OpenLayers.Control.DrawFeature(polygonLayer,
            OpenLayers.Handler.Polygon),
        box: new OpenLayers.Control.DrawFeature(boxLayer,
            OpenLayers.Handler.RegularPolygon, {
                handlerOptions: {
                    sides: 4,
                    irregular: true
                }
            }
        )
    };

    for(var key in drawControls) {
        mapObject.addControl(drawControls[key]);
    }
    document.getElementById('noneToggle').checked = true;
    mapObject.addControl(new OpenLayers.Control.LayerSwitcher({'ascending':false}));
    mapObject.addControl(new OpenLayers.Control.OverviewMap());
    mapObject.addControl(new OpenLayers.Control.KeyboardDefaults());
    showWmsLayer({});
    showMarkers();
    setCenter();
  };

  function toggleControl(element) {
      for(key in drawControls) {
          var control = drawControls[key];
          if(element.value == key && element.checked) {
              control.activate();
          } else {
              control.deactivate();
          }
      }
  }

  function allowPan(element) {
      var stop = !element.checked;
      for(var key in drawControls) {
          drawControls[key].handler.stopDown = stop;
          drawControls[key].handler.stopUp = stop;
      }
  }

  function pointFeature(event) {
    console.log(event.geometry.transform('EPSG:3857', 'EPSG:4326'));
  }
  initMapOpenLayer();
